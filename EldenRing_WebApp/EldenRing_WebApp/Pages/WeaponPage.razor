@page "/weaponPage"
@inject ApiService api
@inject NavigationManager navigationmanager;
@using EldenRing_WebApp.Data
@using Attribute=EldenRing_WebApp.Data.Attribute
<h3>WeaponPage</h3>



<MudTable Items="@weapons" Hover="true" T="Weapon" OnRowClick="@RowClicked" Filter="new Func<Weapon,bool>(FilterFunc1)" @bind-SelectedItem="selectedweapon">
	<ToolBarContent>
		<MudText Typo="Typo.h6">List of Weapons</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	
	<ColGroup>
		<col />
		<col style=" width: 300px" />
		<col />
		<col />
		<col />
		<col />
		<col />
		<col />
	</ColGroup>

	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Description</MudTh>
		<MudTh>Category</MudTh>
		<MudTh>Weigth</MudTh>
		<MudTh>Attack</MudTh>
		<MudTh>Defence</MudTh>
		<MudTh>Sclaing</MudTh>
		<MudTh>Required Attributes</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="name">@context.name</MudTd>
		<MudTd DataLabel="Description">@context.description</MudTd>
		<MudTd DataLabel="Category">@context.category</MudTd>
		<MudTd DataLabel="Weigth">@context.weight</MudTd>
		<MudTd DataLabel="Attack">
			<MudStack>
				<table>
					<tbody>
						@foreach (var att in context.attack)
						{
							<tr>
								<td style="padding:0 20px 0 0;" align="left">@att.name</td>
								<td style="padding:0 30px 0 0;" align="right">@att.amount</td>
							</tr>
						}
					</tbody>
				</table>
			</MudStack>
		</MudTd>
		<MudTd DataLabel="Defence">
			<MudStack>
				<table>
					<tbody>
						@foreach (var att in context.defence)
						{
							<tr>
								<td style="padding:0 20px 0 0;" align="left">@att.name</td>
								<td style="padding:0 30px 0 0;" align="right">@att.amount</td>
							</tr>
						}
					</tbody>
				</table>
			</MudStack>
		</MudTd>
		<MudTd DataLabel="Sclaing">
			<MudStack>
				<table>
					<tbody>
						@foreach (var att in context.scalesWith)
						{
							<tr>
								<td style="padding:0 15px 0 0px;" align="left">@att.name</td>
								<td style="padding:0 30px 0 0px;" align="right">@att.scaling</td>
							</tr>
						}
					</tbody>
				</table>
			</MudStack>
		</MudTd>
		<MudTd DataLabel="Required Attributes">
			<MudStack>
				<table>
					<tbody>
						@foreach (var att in context.requiredAttributes)
						{
							<tr>
								<td style="padding:0 0px 0 0px;" align="left">@att.name</td>
								<td style="padding:0 0px 0 0px;" align="right">@att.amount</td>
							</tr>
						}
					</tbody>
				</table>
			</MudStack>
		</MudTd>
	</RowTemplate>
</MudTable>

@code {

	private void test()
	{
		Console.WriteLine("Test succses");
	}

	List<Weapon> weapons = new List<Weapon>();
	List<Weapon> filteredWeapons = new List<Weapon>();
	public string FilterText { get; set; } = "";
	public string FilterSelect { get; set; }

	MudTextField<string> CoolesTextField;

	protected override async Task OnInitializedAsync()
	{
		weapons = await api.GetWeaponData();
		filteredWeapons = weapons.ToList();
		Console.WriteLine(weapons.Count);
	}


	public void RowClicked(TableRowClickEventArgs<Weapon> w)
	{
		Weapon weapon = selectedweapon;
		api.selectedWeapon = weapon;
		navigationmanager.NavigateTo("/detailWeapon");
	}


	private string searchString = "";
	private Weapon selectedweapon = null;

	private List<Weapon> Elements = new List<Weapon>();


	private bool FilterFunc1(Weapon element) => FilterFunc(element, searchString);

	private bool FilterFunc(Weapon element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.weight.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}
}
