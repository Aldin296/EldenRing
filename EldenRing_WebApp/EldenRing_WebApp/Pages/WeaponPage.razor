@page "/weaponPage"
@inject ApiService api
@inject NavigationManager navigationmanager;
@using EldenRing_WebApp.Data

<h3>WeaponPage</h3>
<Row>
	<MudSelect @bind-Value="FilterSelect" Dense="true" T="string" Label="Filter" Variant="Variant.Text">
		<MudSelectItem Value="@("Name")" />
		<MudSelectItem Value="@("Category")" />
		<MudSelectItem Value="@("Weight")" />
	</MudSelect>
	<div class="form__group field">
		<InputText  class="form__field" @bind-Value="FilterText" @onkeyup="@Enter"></InputText>
		<label for="name" class="form__label">Filter Text</label>
	</div>
	<!--<MudTextField T=string @ref="CoolesTextField" @onkeydown="@Enter"  Variant="Variant.Text"></MudTextField>-->
</Row>

<table class="table" style="overflow-x:auto;">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description</th>
			<th>Attack Stats</th>
			<th>Defence Stats</th>
			<th>Attribute Scaling</th>
			<th>Required Attributes</th>
			<th>Category</th>
			<th>Weight (.Kg)</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var weapon in filteredWeapons)
		{
			<tr @onclick="(() => OpenDetailPage(weapon))">
					<td>@weapon.name</td>
					<td>@weapon.description</td>
					<td>
						<table>
							<tbody>
								@foreach (var att in weapon.attack)
								{
									<tr>
										<td style="padding:0 15px 0 0px;" align="left">@att.name</td>
										<td style="padding:0 0px 0 0px;" align="right">@att.amount</td>
									</tr>
								}
							</tbody>
						</table>
					</td>
					<td>
						<table>
							<tbody>
								@foreach (var def in weapon.defence)
								{
									<tr>
										<td style="padding:0 15px 0 0px;" align="left">@def.name</td>
										<td style="padding:0 15px 0 15px;" align="right">@def.amount</td>
									</tr>
								}
							</tbody>
						</table>
					</td>
					<td>
						<table>
							<tbody>
								@foreach (var sc in weapon.scalesWith)
								{
									<tr>
										<td style="padding:0 15px 0 15px;" align="left">@sc.name </td>
										<td style="padding:0 15px 0 15px;" align="right">@sc.scaling</td>
									</tr>
								}
							</tbody>
						</table>
					</td>
					<td>
						<table>
							<tbody>
								@foreach (var req in weapon.requiredAttributes)
								{
									<tr>
										<td style="padding:0 15px 0 15px;" align="left">@req.name </td>
										<td style="padding:0 15px 0 15px;" align="right">@req.amount</td>
									</tr>
								}
							</tbody>
						</table>
					</td>
					<td>@weapon.category</td>
					<td>@weapon.weight</td>				
			</tr>
		}
	</tbody>
</table>


@code {
	List<Weapon> weapons = new List<Weapon>();
	List<Weapon> filteredWeapons = new List<Weapon>();
	public string FilterText { get; set; } = "";
	public string FilterSelect { get; set; }

	MudTextField<string> CoolesTextField;

	protected override async Task OnInitializedAsync()
	{
		weapons = await api.GetWeaponData();
		filteredWeapons = weapons.ToList();
		Console.WriteLine(weapons.Count);
	}

	public void Enter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			filteredWeapons.Clear();
			foreach(Weapon w in weapons)
			{
				if (GetFilter().Invoke(w) == true)
				{
					filteredWeapons.Add(w);

				}
			}

		}
	}

	public Predicate<object> GetFilter()
	{
		switch (FilterSelect)
		{
			case "Name":
				return NameFilter;
			case "Category":
				return CategoryFilter;
			case "Weight":
				return WeightFilter;
		}

		return NameFilter; //Default Filter
	}

	public bool NameFilter(object obj)
	{
		Weapon filterobject = obj as Weapon;

		return filterobject?.name?.Contains(FilterText) == true;
	}

	public bool CategoryFilter(object obj)
	{
		Weapon filterobject = obj as Weapon;
		return filterobject?.category?.Contains(FilterText) == true;
	}

	public bool WeightFilter(object obj)
	{
		Weapon filterobject = obj as Weapon;
		return filterobject?.weight?.ToString()?.Contains(FilterText) == true;
	}

	public void OpenDetailPage(Weapon weapon)
	{
		Console.WriteLine(weapon.name);
		api.selectedWeapon = weapon;
		navigationmanager.NavigateTo("/detailWeapon");
	}
}
